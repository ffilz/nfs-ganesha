{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0c29eda9_94be29e4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2022-06-01T15:03:28Z",
      "side": 1,
      "message": "Jeff could you review this please.",
      "revId": "11969debf25b382af2e0236113f905a76cb87b15",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c7638c7_d76f3df2",
        "filename": "src/support/refstr.c",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1008909
      },
      "writtenOn": "2022-06-01T15:38:50Z",
      "side": 1,
      "message": "Doing this here seems wrong as not all of the gsh_refstr users are necessarily RCU-protected, and this could end up blocking when it\u0027s not actually needed.\n\nThat said, the RCU rules around gsh_refstr are not as clear as they should be. Some (most?) callers should be calling synchronize_rcu() before releasing the \"canonical\" reference on the object. Very few actually do this. Really, only the rados cluster backends handle this right, AFAICT.\n\nMaybe you\u0027re right and we should just make these things be properly RCU-managed so the upper layers don\u0027t need to deal with this. Instead of calling synchronize_rcu here though, I think we should use call_rcu.\n\nThat means that you\u0027d need to embed a rcu_head inside the gsh_refstr, but I\u0027d rather trade a little memory and avoid blocking a thread until the current rcu grace period ends.",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 2
      },
      "revId": "11969debf25b382af2e0236113f905a76cb87b15",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e6b30f4_abc0ff72",
        "filename": "src/support/refstr.c",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1015367
      },
      "writtenOn": "2022-06-02T15:49:11Z",
      "side": 1,
      "message": "Thanks Jeff for review\nWe are hitting this race here as reported by address_sanitizer\nWe could end up releasing canonical reference in copy_gsh_export and free the pointer, simultaneously read thread might have got the reference.\n\nWe could use call_rcu also to avoid blocking.\n\nBut I am not sure why we have this assert in gsh_refstr_get()\n        /*                              \n         * The assumption is that the persistent reference to the object is\n         * only put after an RCU grace period has settled.\n         */      \n        if (!urcu_ref_get_unless_zero(\u0026gr-\u003egr_ref))\n                abort();\n\nWe could have zero ref, we should return NULL here or copy new pointer to old pointer before reclaiming old pointer, if we can\u0027t return NULL here.",
      "parentUuid": "6c7638c7_d76f3df2",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 2
      },
      "revId": "11969debf25b382af2e0236113f905a76cb87b15",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e73c468_f6d4b4d8",
        "filename": "src/support/refstr.c",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1008909
      },
      "writtenOn": "2022-06-02T17:23:55Z",
      "side": 1,
      "message": "The assumption with gsh_refstr is that if you\u0027re using RCU, you should unhash the object, then call synchronize_rcu to ensure that no callers can find it, and only then drop the reference we hold on behalf of the hash.\n\nIf that\u0027s done, then an attempt to do a 0-\u003e1 transition on the counter should never happen and so we assert on that. Possibly we could relax that rule if there were some reason to allow this.",
      "parentUuid": "5e6b30f4_abc0ff72",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 41,
        "endChar": 2
      },
      "revId": "11969debf25b382af2e0236113f905a76cb87b15",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}