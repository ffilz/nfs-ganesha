{
  "comments": [
    {
      "key": {
        "uuid": "1bc5b5a4_294af71f",
        "filename": "src/Protocols/NFS/nfs4_op_test_stateid.c",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1008909
      },
      "writtenOn": "2018-10-04T15:55:03Z",
      "side": 1,
      "message": "I don\u0027t understand this at all. Why does it matter what the status is? Either we have an allocated pointer at this point, or we don\u0027t. Maybe we ought to be zeroing out the pointer at the point where it\u0027s freed instead?",
      "revId": "13ccd5c1e90899a013c686af5658828d88513ad3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a13a9425_9a2ba56b",
        "filename": "src/Protocols/NFS/nfs4_op_test_stateid.c",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2018-10-04T16:02:43Z",
      "side": 1,
      "message": "We could do it that way too, but if tsr_status is not NFS4_OK, then tsr_resok4 is technically not a valid part of the response structure.\n\nThis change makes this work the same way all the other Free functions work.\n\nNote that some Free functions could conceivably actually have to pay even closer attention to the status to determine which form of the response structure to use.",
      "parentUuid": "1bc5b5a4_294af71f",
      "revId": "13ccd5c1e90899a013c686af5658828d88513ad3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a4ff0ce_771a8a60",
        "filename": "src/Protocols/NFS/nfs4_op_test_stateid.c",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1003947
      },
      "writtenOn": "2018-10-05T18:43:22Z",
      "side": 1,
      "message": "Actually, I would expect the NFSv4 op to free all resources if there was a failure while processing itself and no need to call this. The caller of this Free function should call only on success.",
      "parentUuid": "a13a9425_9a2ba56b",
      "revId": "13ccd5c1e90899a013c686af5658828d88513ad3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "622d5f80_7098dc17",
        "filename": "src/Protocols/NFS/nfs4_op_test_stateid.c",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2018-10-05T19:15:54Z",
      "side": 1,
      "message": "LOCK and LOCKT response can have a conflicting lock holder on NFS4ERR_DENIED that would have to be freed. SETCLIENTID gives information on NFS4ERR_CLID_INUSE. All from RFC 7530. I don\u0027t know if any of the 4.1 or 4.2 ops have non-success return info.\n\nSo we always call the op free function... so the special knowledge is coded there rather than in the op dispatch\n\nNLM_LOCK and NLM_LOCKT should have the same thing.",
      "parentUuid": "9a4ff0ce_771a8a60",
      "revId": "13ccd5c1e90899a013c686af5658828d88513ad3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}