{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3b24ec54_c4ed3068",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2022-08-09T17:22:22Z",
      "side": 1,
      "message": "Some minor fixups.\n\nI prefer the style where all local variable declarations are at the top of the block not interspersed with code.",
      "revId": "c16722ecf955c00cf62615d0befee8e7d2bea548",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3f9b1a4_11fa6d4d",
        "filename": "src/FSAL/commonlib.c",
        "patchSetId": 9
      },
      "lineNbr": 1755,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2022-08-09T17:22:22Z",
      "side": 1,
      "message": "Is it safe to do this dec refcount? We\u0027re still referencing openstate.",
      "revId": "c16722ecf955c00cf62615d0befee8e7d2bea548",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "438c3158_3742b4a1",
        "filename": "src/FSAL/commonlib.c",
        "patchSetId": 9
      },
      "lineNbr": 1755,
      "author": {
        "id": 1019791
      },
      "writtenOn": "2022-08-10T01:30:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3f9b1a4_11fa6d4d",
      "revId": "c16722ecf955c00cf62615d0befee8e7d2bea548",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43103c99_abdf954d",
        "filename": "src/FSAL/commonlib.c",
        "patchSetId": 9
      },
      "lineNbr": 1792,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2022-08-09T17:22:22Z",
      "side": 1,
      "message": "Could you move the declaration to the top of the block and just do the assignment here?",
      "revId": "c16722ecf955c00cf62615d0befee8e7d2bea548",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cdf94c52_f2e7ef24",
        "filename": "src/FSAL/commonlib.c",
        "patchSetId": 9
      },
      "lineNbr": 1792,
      "author": {
        "id": 1019791
      },
      "writtenOn": "2022-08-10T01:30:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43103c99_abdf954d",
      "revId": "c16722ecf955c00cf62615d0befee8e7d2bea548",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb50e2e8_573e8078",
        "filename": "src/FSAL/commonlib.c",
        "patchSetId": 9
      },
      "lineNbr": 1794,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2022-08-09T17:22:22Z",
      "side": 1,
      "message": "Is this safe? We\u0027re still referencing part of openstate.",
      "revId": "c16722ecf955c00cf62615d0befee8e7d2bea548",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "329c8e0e_063d14a8",
        "filename": "src/FSAL/commonlib.c",
        "patchSetId": 9
      },
      "lineNbr": 1794,
      "author": {
        "id": 1019791
      },
      "writtenOn": "2022-08-10T01:30:48Z",
      "side": 1,
      "message": "sorry, it\u0027s hard to say whether it\u0027s safe or not, because this function:fsal_find_fd return related_fd to the caller function.",
      "parentUuid": "fb50e2e8_573e8078",
      "revId": "c16722ecf955c00cf62615d0befee8e7d2bea548",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89e5b9b1_18593031",
        "filename": "src/FSAL/commonlib.c",
        "patchSetId": 9
      },
      "lineNbr": 1794,
      "author": {
        "id": 1019791
      },
      "writtenOn": "2022-08-11T06:40:07Z",
      "side": 1,
      "message": "but at least, it did not make things worse.",
      "parentUuid": "329c8e0e_063d14a8",
      "revId": "c16722ecf955c00cf62615d0befee8e7d2bea548",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba556e46_6348a972",
        "filename": "src/FSAL/commonlib.c",
        "patchSetId": 9
      },
      "lineNbr": 1794,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2022-08-11T15:33:46Z",
      "side": 1,
      "message": "Hmm, good point.\n\nI\u0027m actually re-working the fsal_fd stuff for async because we need to protect an fd across a async/non-blocking I/O that will have a completion call back on another thread. It will also improve protection of the fd I believe and at that point, once we actually hand out an fd, it\u0027s protected until the I/O operation is complete. So a racing close would then block on completion of the I/O which is appropriate.\n\nHmm, with the current design, we can\u0027t defer the dec ref on the openstate until the I/O is complete because we don\u0027t have a call on completion... My new design DOES include such a call...",
      "parentUuid": "89e5b9b1_18593031",
      "revId": "c16722ecf955c00cf62615d0befee8e7d2bea548",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fab3301f_f3cd1212",
        "filename": "src/FSAL/commonlib.c",
        "patchSetId": 9
      },
      "lineNbr": 1818,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2022-08-11T15:33:46Z",
      "side": 1,
      "message": "Oh, and crud... we don\u0027t hold the lock either... :-(\n\nSo yes, we have iffy code here...\n\nMaybe my redesign of fsal_fd needs to go in as a bug fix. Here\u0027s one of the patches - see the other related patches also:\n\nhttps://review.gerrithub.io/c/ffilz/nfs-ganesha/+/531877",
      "revId": "c16722ecf955c00cf62615d0befee8e7d2bea548",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cc9cff4_ca6ab734",
        "filename": "src/include/FSAL/fsal_commonlib.h",
        "patchSetId": 9
      },
      "lineNbr": 210,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2022-08-09T17:22:22Z",
      "side": 1,
      "message": "Hmm, this won\u0027t work for NLM which passes related_state \u003d\u003d NULL anyway. Let\u0027s remove STATE_TYPE_NLM_LOCK from this test.\n\nIf at some point we decide to do work to try and link NLM lock state with NLM share state, we will have to do a different lookup anyway and we can code that into here.",
      "revId": "c16722ecf955c00cf62615d0befee8e7d2bea548",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e4565a1_32791ca6",
        "filename": "src/include/FSAL/fsal_commonlib.h",
        "patchSetId": 9
      },
      "lineNbr": 210,
      "author": {
        "id": 1019791
      },
      "writtenOn": "2022-08-10T01:30:48Z",
      "side": 1,
      "message": "What about the following change, it\u0027s equal to the origin code. I\u0027m not sure\nwhether it\u0027s safe to remove STATE_TYPE_NLM_LOCK.\n\tif (state_type \u003d\u003d STATE_TYPE_LOCK || state_type \u003d\u003d STATE_TYPE_NLM_LOCK) {\n\t    if (related_state) {\n\t\tmemcpy(state-\u003estate_data.lock.openstate_key,\n\t\t\trelated_state-\u003estateid_other, OTHERSIZE);\n            } else {\n                memset(state-\u003estate_data.lock.openstate_key, 0, OTHERSIZE);\n            }\n        }",
      "parentUuid": "2cc9cff4_ca6ab734",
      "revId": "c16722ecf955c00cf62615d0befee8e7d2bea548",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9141802b_3c28cde5",
        "filename": "src/include/FSAL/fsal_commonlib.h",
        "patchSetId": 9
      },
      "lineNbr": 210,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2022-08-11T15:33:46Z",
      "side": 1,
      "message": "Oh, I see the issue...\n\nBUT - note that related state is ONLY every looked up for NFSv4...\n\nYou don\u0027t need to initialize to all zero because the state was allocated with calloc.\n\nSo hmm, really the only test you need is if related_state is non-NULL, don\u0027t even need the the test for state_type...",
      "parentUuid": "6e4565a1_32791ca6",
      "revId": "c16722ecf955c00cf62615d0befee8e7d2bea548",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e2b2fa3_6c699308",
        "filename": "src/include/FSAL/fsal_commonlib.h",
        "patchSetId": 9
      },
      "lineNbr": 210,
      "author": {
        "id": 1019791
      },
      "writtenOn": "2022-08-12T10:27:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9141802b_3c28cde5",
      "revId": "c16722ecf955c00cf62615d0befee8e7d2bea548",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}