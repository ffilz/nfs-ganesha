{
  "comments": [
    {
      "key": {
        "uuid": "b69f78c3_5bdfe06f",
        "filename": "src/Protocols/NFS/nfs4_op_open.c",
        "patchSetId": 1
      },
      "lineNbr": 526,
      "author": {
        "id": 1004075
      },
      "writtenOn": "2018-11-08T14:10:18Z",
      "side": 1,
      "message": "is !\u003d 0 seems odd here",
      "revId": "19c3f6c3772886b4c0d6f11bd101f8ff9ab215c0",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbb6dec7_935f5914",
        "filename": "src/Protocols/NFS/nfs4_op_open.c",
        "patchSetId": 1
      },
      "lineNbr": 526,
      "author": {
        "id": 1004087
      },
      "writtenOn": "2018-11-08T14:46:30Z",
      "side": 1,
      "message": "It converts it from a bit-flag into a boolean.  Probably not strictly necessary, but...",
      "parentUuid": "b69f78c3_5bdfe06f",
      "revId": "19c3f6c3772886b4c0d6f11bd101f8ff9ab215c0",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebebae24_c654e9bb",
        "filename": "src/Protocols/NFS/nfs4_op_open.c",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1004333
      },
      "writtenOn": "2018-11-09T18:56:42Z",
      "side": 1,
      "message": "What if client re-opens same file (open_upgrade/downgrade) and clears this share_mode_bit. This function doesnt get called in the second open if clients sets CLAIM_DELEGATE_CUR and hence we will not clear fdeleg_stats.share_deny_write field. \n\nMay be its good to have a reference to open_state in fdeleg_stats instead and read from state_data.share which will fetch updated share* flags anytime. Thoughts?",
      "revId": "19c3f6c3772886b4c0d6f11bd101f8ff9ab215c0",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d6c9c46_f5432e01",
        "filename": "src/Protocols/NFS/nfs4_op_open.c",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1004087
      },
      "writtenOn": "2019-01-29T17:10:33Z",
      "side": 1,
      "message": "It looks to me like do_delegation() (and therefore get_delegation()) is called for every successful open, unless the client doesn\u0027t ask for a delegation.  Is it the case that an open upgrade/downgrade on a file with a delegation never asks for a new delegation?  I\u0027d think it\u0027d have to, since it\u0027s current delegation is no longer relevant to the new open mode.  What am I missing?",
      "parentUuid": "ebebae24_c654e9bb",
      "revId": "19c3f6c3772886b4c0d6f11bd101f8ff9ab215c0",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d569052f_ae7686b4",
        "filename": "src/Protocols/NFS/nfs4_op_open.c",
        "patchSetId": 1
      },
      "lineNbr": 527,
      "author": {
        "id": 1004333
      },
      "writtenOn": "2019-01-31T03:35:09Z",
      "side": 1,
      "message": "yes thats right. From the current implementation, we end up calling do_delegation again if the second OPEN (without CLAIM_DELEG_PREV) is requested from the client. However I am not sure if it is the right way to do it as we shall either end up recalling earlier delegation or grant two conflicting delegations to the same client. RFC doesnt state about it clearly on how delegation states should be handled for OPEN upgrade or downgrade. However it does state that share_access should be updated with the latest OPEN share mode. \n\nBut if the open mode is CLAIM_DELEGATE_CUR in do_delegation-\u003eshould_we_grant_deleg(), we return false and  hence do not grant new delegation.",
      "parentUuid": "4d6c9c46_f5432e01",
      "revId": "19c3f6c3772886b4c0d6f11bd101f8ff9ab215c0",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a79ac376_58280528",
        "filename": "src/SAL/state_deleg.c",
        "patchSetId": 1
      },
      "lineNbr": 517,
      "author": {
        "id": 1008909
      },
      "writtenOn": "2018-12-20T17:06:30Z",
      "side": 1,
      "message": "I think this looks correct, but the logic in this function sure is convoluted. Maybe we need a nice switch statement there and then handle each case individually?",
      "revId": "19c3f6c3772886b4c0d6f11bd101f8ff9ab215c0",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}