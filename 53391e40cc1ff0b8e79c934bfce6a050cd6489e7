{
  "comments": [
    {
      "key": {
        "uuid": "cdbf5e72_3aa21e93",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 700,
      "author": {
        "id": 1004087
      },
      "writtenOn": "2020-09-18T13:25:51Z",
      "side": 1,
      "message": "*qualified",
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b3f3f30_5e74e2d9",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 700,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-09-18T18:44:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cdbf5e72_3aa21e93",
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37bb4a28_798d63b2",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 714,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "I\u0027d actually add a debug-only check for it (I don\u0027t know if you do debug-only builds with debug checking like that, but seems worthwhile to \"assert\" / \"check\" that strncmp of path and exppath matches).\n\nI just realized something amusing: what does NFS say / do about case-*insensitive* filesystems? Does NFS dictate case sensitivity?",
      "range": {
        "startLine": 714,
        "startChar": 0,
        "endLine": 714,
        "endChar": 74
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e7c4183_0eae0044",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 714,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-09-18T18:44:34Z",
      "side": 1,
      "message": "Ok, done. I don\u0027t think NFSv3 has much to say about case sensitivity...\n\nGanesha is case sensitive though...",
      "parentUuid": "37bb4a28_798d63b2",
      "range": {
        "startLine": 714,
        "startChar": 0,
        "endLine": 714,
        "endChar": 74
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bc5860f_b3d8c187",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 728,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "This initialization is unnecessary (and would have tricked the compiler into not warning you about incorrect uninitialized returns / usage)",
      "range": {
        "startLine": 728,
        "startChar": 0,
        "endLine": 728,
        "endChar": 38
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec3101f0_aad1a167",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 728,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-09-18T18:44:34Z",
      "side": 1,
      "message": "done",
      "parentUuid": "4bc5860f_b3d8c187",
      "range": {
        "startLine": 728,
        "startChar": 0,
        "endLine": 728,
        "endChar": 38
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08312f0f_a7acb43b",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 729,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "I wouldn\u0027t declare obj up here (it causes it to \"leak\" across iterations)",
      "range": {
        "startLine": 729,
        "startChar": 34,
        "endLine": 729,
        "endChar": 37
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7d85ef1_855c5954",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 729,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "Up to you, but it\u0027s sort of less error prone to always just pass in dirobj instead of \u0026parent to the \"fill in the object\" functions. That way, if you return early, you don\u0027t have to remember \"oh right, *dirobj \u003d parent\". At the same time, this way you could be setting *dirobj *only* on success. Up to you.",
      "range": {
        "startLine": 729,
        "startChar": 25,
        "endLine": 729,
        "endChar": 31
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "868947c3_2d651a9c",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 729,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-09-18T17:59:47Z",
      "side": 1,
      "message": "I use obj so we only set dirobj on success, on the other hand it isn\u0027t much of a big deal... and we could always set dirobj to NULL on failure...",
      "parentUuid": "d7d85ef1_855c5954",
      "range": {
        "startLine": 729,
        "startChar": 25,
        "endLine": 729,
        "endChar": 31
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "478903dd_31811097",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 729,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-09-18T18:44:34Z",
      "side": 1,
      "message": "done",
      "parentUuid": "08312f0f_a7acb43b",
      "range": {
        "startLine": 729,
        "startChar": 34,
        "endLine": 729,
        "endChar": 37
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fcf8427_a7eb4c69",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 730,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "I don\u0027t see why there\u0027s both \"name\" and \"rest\". name is only temporarily used to hold the alloca and be the target for the memcpy/strlcpy, and then rest is used forever after.",
      "range": {
        "startLine": 730,
        "startChar": 0,
        "endLine": 730,
        "endChar": 23
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "720c149c_8a977153",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 730,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-09-18T18:44:34Z",
      "side": 1,
      "message": "yea, got rid of name, that\u0027s the nice thing about alloca, you don\u0027t have to remember the original pointer",
      "parentUuid": "1fcf8427_a7eb4c69",
      "range": {
        "startLine": 730,
        "startChar": 0,
        "endLine": 730,
        "endChar": 23
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa9cb57a_48ba7cb7",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 743,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "Hmm. I think this is error prone.\n\nDoes kfnsd also allow you to pass an arbitrary number of extraneous slashes?\n\nThat is, mount against \"\u003croot\u003e/////foo\" seems like it should just return an error instead.",
      "range": {
        "startLine": 743,
        "startChar": 0,
        "endLine": 743,
        "endChar": 72
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17d68b69_b130c62d",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 743,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-09-18T18:44:34Z",
      "side": 1,
      "message": "Yep knfsd allows it...",
      "parentUuid": "aa9cb57a_48ba7cb7",
      "range": {
        "startLine": 743,
        "startChar": 0,
        "endLine": 743,
        "endChar": 72
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "021016fa_a627df9c",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 754,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "Same thing. Maybe you could make it an option to allow poorly specified paths, but silently trimming is \"dangerous\".",
      "range": {
        "startLine": 754,
        "startChar": 0,
        "endLine": 754,
        "endChar": 48
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d35808b3_8ce97ab3",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 755,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "\u003e *0*. or !\u003d 0, whichever you prefer.",
      "range": {
        "startLine": 755,
        "startChar": 0,
        "endLine": 755,
        "endChar": 39
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c385f707_791668e0",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 755,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-09-18T18:44:34Z",
      "side": 1,
      "message": "Oops, this was a left over from copying the open_dir_by_path_walk that had to leave the root string, \"/\" alone.",
      "parentUuid": "d35808b3_8ce97ab3",
      "range": {
        "startLine": 755,
        "startChar": 0,
        "endLine": 755,
        "endChar": 39
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa6d88db_f8250daa",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 762,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "I\u0027d personally do this up at the top, rather than messing with the strings first to keep all the string games closer together.",
      "range": {
        "startLine": 758,
        "startChar": 1,
        "endLine": 762,
        "endChar": 21
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "310dabb3_dea4d30a",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 767,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "LogDebug here that you\u0027re just returning the root, please.",
      "range": {
        "startLine": 767,
        "startChar": 0,
        "endLine": 767,
        "endChar": 5
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20129e87_25f8979a",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 773,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "What limits are there on the length of len? (I get nervous anytime a naked alloca is present)",
      "range": {
        "startLine": 773,
        "startChar": 0,
        "endLine": 773,
        "endChar": 24
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7915db2e_9cf75783",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 773,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-09-18T18:44:34Z",
      "side": 1,
      "message": "Will check len for \u003e MAXPATHLEN",
      "parentUuid": "20129e87_25f8979a",
      "range": {
        "startLine": 773,
        "startChar": 0,
        "endLine": 773,
        "endChar": 24
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b350eae2_608466a7",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 773,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T19:32:25Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7915db2e_9cf75783",
      "range": {
        "startLine": 773,
        "startChar": 0,
        "endLine": 773,
        "endChar": 24
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b593352_b502a499",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 776,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "Prefer strlcpy?",
      "range": {
        "startLine": 776,
        "startChar": 1,
        "endLine": 776,
        "endChar": 7
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5e65c0f_66ed454f",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 776,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-09-18T17:59:47Z",
      "side": 1,
      "message": "We already no length, so no need to scan the string again.\n\nOtherwise we could (almost) use gsh_strdupa, the almost being that wouldn\u0027t let us trim trailing \u0027/\u0027 which code below depends on...",
      "parentUuid": "9b593352_b502a499",
      "range": {
        "startLine": 776,
        "startChar": 1,
        "endLine": 776,
        "endChar": 7
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "690e609d_f070ce76",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 783,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "I think doing this as while (next_slash !\u003d NULL) is easier to follow, even though it results in a \"duplicate\" lookup call outside the loop.",
      "range": {
        "startLine": 783,
        "startChar": 0,
        "endLine": 783,
        "endChar": 24
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "506391aa_c4a0bfa1",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 783,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-09-18T17:59:47Z",
      "side": 1,
      "message": "Wouldn\u0027t require a lookup outside the loop, just initialize next_slash to rest...\n\nI was moving p into the loop though...",
      "parentUuid": "690e609d_f070ce76",
      "range": {
        "startLine": 783,
        "startChar": 0,
        "endLine": 783,
        "endChar": 24
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5eebbfa3_21625297",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 785,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "prefer strchr to index (index is deprecated).\n\nAlso, is p in your code more accurately \"next_slash\"?",
      "range": {
        "startLine": 785,
        "startChar": 0,
        "endLine": 785,
        "endChar": 23
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6a4aa9f_7935171c",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 785,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-09-18T18:44:34Z",
      "side": 1,
      "message": "Done for both",
      "parentUuid": "5eebbfa3_21625297",
      "range": {
        "startLine": 785,
        "startChar": 0,
        "endLine": 785,
        "endChar": 23
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0651b2e_29acbb14",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 792,
      "author": {
        "id": 1004087
      },
      "writtenOn": "2020-09-18T13:25:51Z",
      "side": 1,
      "message": "I don\u0027t think rest can be \\0 here.  The while() condition checked it, and nothing changed it.  Did you mean to compare it to \u0027/\u0027?   And if to, it should probably come before the index() call.",
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d42c6d4_b6ee7ab9",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 792,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-09-18T14:05:45Z",
      "side": 1,
      "message": "Oops, yea, it should be a \u0027/\u0027, and yea, it could be before the index call. And because we have stripped trailing \u0027/\u0027 from the string, we wouldn\u0027t need to continue because we know there MUST be a non-NUL character after it.\n\nSo in fact, it should be:\n\nwhile (*rest \u003d\u003d \u0027/\u0027)\n   rest++;\n\nWhich points rest at the start of the next path component ready for index to find the end of that path component.",
      "parentUuid": "c0651b2e_29acbb14",
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39173141_5b565bf2",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 792,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "As above though, I think this warrants at *least* warning / Debug logs that you\u0027re eating up embedded extraneous slashes.",
      "parentUuid": "6d42c6d4_b6ee7ab9",
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "385c2186_d8395b3f",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 794,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "This is hard to follow with your alternate goto skip variant...",
      "range": {
        "startLine": 794,
        "startChar": 0,
        "endLine": 794,
        "endChar": 12
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "935e2f83_a56a640b",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 799,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "What\u0027s this putref for? Is it because you got the root by reference at the start? (If so, I think this code would still be wrong, because you\u0027d need to putref on all the parents along the way, right?)",
      "range": {
        "startLine": 799,
        "startChar": 0,
        "endLine": 799,
        "endChar": 36
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "301bebff_632d976a",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 799,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-09-18T18:44:34Z",
      "side": 1,
      "message": "I putref all the parents now after using them in lookup. If the lookup fails, we aren\u0027t returning anything so it\u0027s appropriate to putref the parent (note that nfs_export_get_root_entry gets the ref for the initial parent).",
      "parentUuid": "935e2f83_a56a640b",
      "range": {
        "startLine": 799,
        "startChar": 0,
        "endLine": 799,
        "endChar": 36
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74bdf648_bdc2c073",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 810,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-09-17T22:34:48Z",
      "side": 1,
      "message": "Hmm, we could use fsal_lookup here. Maybe we should be permission checking the component lookup...\n\nIn exchange, we would get an extraneous directory check (we could move the directory check to just verifying the terminal node).",
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd6f4241_dac05072",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 810,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "Checking !\u003d DIRECTORY isn\u0027t so bad :).",
      "parentUuid": "74bdf648_bdc2c073",
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98d1520a_c765cc2e",
        "filename": "src/FSAL/fsal_helper.c",
        "patchSetId": 1
      },
      "lineNbr": 810,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-09-18T17:18:59Z",
      "side": 1,
      "message": "Since the existing code doesn\u0027t do permission checks, I\u0027ll keep this as is. Note that we DO check for DIRECTORY below, so each lookup will be from a DIRECTORY (since we start with the export root which MUST be a directory).\n\nNote this code and the old code does not handle referrals, but then they are irrelevant for NFS v3 and 9P anyway...",
      "parentUuid": "bd6f4241_dac05072",
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3c7447b_7712b64f",
        "filename": "src/Protocols/NFS/mnt_Mnt.c",
        "patchSetId": 1
      },
      "lineNbr": 142,
      "author": {
        "id": 1017716
      },
      "writtenOn": "2020-09-18T17:08:36Z",
      "side": 1,
      "message": "Hmm. Should there be some other helper for \"lookup by tag or path\"? (Duplicating this logic here, in 9p, etc. seems error prone)",
      "range": {
        "startLine": 142,
        "startChar": 0,
        "endLine": 142,
        "endChar": 30
      },
      "revId": "53391e40cc1ff0b8e79c934bfce6a050cd6489e7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}