{
  "comments": [
    {
      "key": {
        "uuid": "e72206fc_acf1380e",
        "filename": "src/FSAL/commonlib.c",
        "patchSetId": 10
      },
      "lineNbr": 3195,
      "author": {
        "id": 1008909
      },
      "writtenOn": "2020-06-24T13:23:14Z",
      "side": 1,
      "message": "I don\u0027t really understand the protection for fullpath and pseudopath here.\n\nIn this function, you\u0027re taking the rcu_read_lock and then using rcu_dereference to fetch the fullpath pointer, but there are calls all over the code to CTX_FULLPATH which seem to dereference the same pointer without any such protection. Why is it safe there but not here?",
      "revId": "d7262ad58b3c3d131a44d4f0ced25178318d48df",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b55d05c_67408c69",
        "filename": "src/FSAL/commonlib.c",
        "patchSetId": 10
      },
      "lineNbr": 3195,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-06-24T14:04:18Z",
      "side": 1,
      "message": "The protection is to access op_ctx-\u003ectx_export-\u003efullpath and op_ctx-\u003ectx_export-\u003epseudopath. That is fetching from the struct gsh_export which can be messed with by other threads.\n\nOnce a refstr is stored in op_ctx-\u003ectx_fullpath or op_ctx-\u003ectx_pseudopath, those refstr are safe because no other thread accesses this thread\u0027s op_ctx. CTX_FULLPATH accesses this thread\u0027s refstr: ctx-\u003ectx_fullpath-\u003egr_val.",
      "parentUuid": "e72206fc_acf1380e",
      "revId": "d7262ad58b3c3d131a44d4f0ced25178318d48df",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a03367d7_5eb7c16e",
        "filename": "src/FSAL/commonlib.c",
        "patchSetId": 10
      },
      "lineNbr": 3195,
      "author": {
        "id": 1008909
      },
      "writtenOn": "2020-06-24T14:12:49Z",
      "side": 1,
      "message": "Ahh ok. I think I get it now. Thanks!",
      "parentUuid": "0b55d05c_67408c69",
      "revId": "d7262ad58b3c3d131a44d4f0ced25178318d48df",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf55613e_9add9c90",
        "filename": "src/FSAL/commonlib.c",
        "patchSetId": 10
      },
      "lineNbr": 3195,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-06-24T14:22:31Z",
      "side": 1,
      "message": "Should I add some comments to describe how it\u0027s being used better?",
      "parentUuid": "a03367d7_5eb7c16e",
      "revId": "d7262ad58b3c3d131a44d4f0ced25178318d48df",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74e9ccd1_f368288e",
        "filename": "src/FSAL/commonlib.c",
        "patchSetId": 10
      },
      "lineNbr": 3233,
      "author": {
        "id": 1008909
      },
      "writtenOn": "2020-06-24T14:12:49Z",
      "side": 1,
      "message": "There are only two callers of this function -- one of which calls it with \"true\" and the other \"false\". You could easily eliminate the bool argument here by moving the \"if (final)\" conditions into the callers.",
      "revId": "d7262ad58b3c3d131a44d4f0ced25178318d48df",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38f229a5_b9a431e2",
        "filename": "src/FSAL/commonlib.c",
        "patchSetId": 10
      },
      "lineNbr": 3233,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2020-06-24T14:22:31Z",
      "side": 1,
      "message": "Good point, I\u0027ll make that change.",
      "parentUuid": "74e9ccd1_f368288e",
      "revId": "d7262ad58b3c3d131a44d4f0ced25178318d48df",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}