{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f76f080d_ca069548",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2022-06-09T16:50:44Z",
      "side": 1,
      "message": "I don\u0027t think this can be right. state_del will need a proper export and fsal_export in order to retire the state (states are allocated and released by FSALs now),\n\nThere must be some situation where a state is still referenced after state_del.",
      "revId": "5540dc35ef8f6deed0f7e50d37a6e23d6cb522e1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfdb4423_a755178f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1015367
      },
      "writtenOn": "2022-06-10T03:28:11Z",
      "side": 1,
      "message": "This is the stack trace, state-\u003estate_obj and state-\u003estate_export are NULL\n\n```\n(gdb) bt\n#0  0x00007fbde07bc4fb in raise () from /lib64/libpthread.so.0\n#1  0x00007fbde20c7ea5 in crash_handler (signo\u003d11, info\u003d0x7fbdc8bfa1f0, ctx\u003d0x7fbdc8bfa0c0) at /usr/src/debug/nfs-ganesha-4.0.2/MainNFSD/nfs_init.c:254\n#2  \u003csignal handler called\u003e\n#3  0x00007fbde2163aa8 in atomic_add_int64_t (augend\u003d0x190, addend\u003d1) at /usr/src/debug/nfs-ganesha-4.0.2/include/abstract_atomic.h:117\n#4  0x00007fbde2163acf in atomic_inc_int64_t (var\u003d0x190) at /usr/src/debug/nfs-ganesha-4.0.2/include/abstract_atomic.h:138\n#5  0x00007fbde21666b1 in _get_gsh_export_ref (a_export\u003d0x0,\n    file\u003d0x7fbde222e908 \"/home/jenkins/nfs-ganesha/build.134/rpmbuild/BUILD/nfs-ganesha-4.0.2/SAL/nfs4_state.c\", line\u003d718,\n    function\u003d0x7fbde222ee60 \u003c__func__.23236\u003e \"release_lock_owner\") at /usr/src/debug/nfs-ganesha-4.0.2/support/export_mgr.c:672\n#6  0x00007fbde21253da in release_lock_owner (owner\u003d0x7fbdcdc1ee00) at /usr/src/debug/nfs-ganesha-4.0.2/SAL/nfs4_state.c:718\n#7  0x00007fbde219cb65 in nfs4_op_release_lockowner (op\u003d0x7fbdc946c460, data\u003d0x7fbdc8201380, resp\u003d0x7fbdc946c140)\n    at /usr/src/debug/nfs-ganesha-4.0.2/Protocols/NFS/nfs4_op_release_lockowner.c:123\n#8  0x00007fbde217b84b in process_one_op (data\u003d0x7fbdc8201380, status\u003d0x7fbdc8bfb8bc) at /usr/src/debug/nfs-ganesha-4.0.2/Protocols/NFS/nfs4_Compound.c:924\n#9  0x00007fbde217c8d3 in nfs4_Compound (arg\u003d0x7fbdcdc14c80, req\u003d0x7fbdcdc14400, res\u003d0x7fbdcdc94880)\n    at /usr/src/debug/nfs-ganesha-4.0.2/Protocols/NFS/nfs4_Compound.c:1339\n#10 0x00007fbde20c2d68 in nfs_rpc_process_request (reqdata\u003d0x7fbdcdc14400, retry\u003dfalse) at /usr/src/debug/nfs-ganesha-4.0.2/MainNFSD/nfs_worker_thread.c:2055\n#11 0x00007fbde20c33e1 in nfs_rpc_valid_NFS (req\u003d0x7fbdcdc14400) at /usr/src/debug/nfs-ganesha-4.0.2/MainNFSD/nfs_worker_thread.c:2293\n#12 0x00007fbde249b821 in svc_vc_decode (req\u003d0x7fbdcdc14400) at /usr/src/debug/nfs-ganesha-4.0.2/libntirpc/src/svc_vc.c:1120\n#13 0x00007fbde2496ba9 in svc_request (xprt\u003d0x7fbdcd01b000, xdrs\u003d0x7fbdcdc0dc80) at /usr/src/debug/nfs-ganesha-4.0.2/libntirpc/src/svc_rqst.c:1218\n#14 0x00007fbde249b726 in svc_vc_recv (xprt\u003d0x7fbdcd01b000) at /usr/src/debug/nfs-ganesha-4.0.2/libntirpc/src/svc_vc.c:1093\n#15 0x00007fbde2496b0d in svc_rqst_xprt_task_recv (wpe\u003d0x7fbdcd01b2f0) at /usr/src/debug/nfs-ganesha-4.0.2/libntirpc/src/svc_rqst.c:1198\n#16 0x00007fbde2497763 in svc_rqst_epoll_loop (wpe\u003d0x7fbddd2fd148) at /usr/src/debug/nfs-ganesha-4.0.2/libntirpc/src/svc_rqst.c:1591\n#17 0x00007fbde24a46a2 in work_pool_thread (arg\u003d0x7fbdc7e15000) at /usr/src/debug/nfs-ganesha-4.0.2/libntirpc/src/work_pool.c:190\n#18 0x00007fbde07b4ea5 in start_thread () from /lib64/libpthread.so.0\n#19 0x00007fbde00bbb0d in clone () from /lib64/libc.so.6\n(gdb) f 6\n#6  0x00007fbde21253da in release_lock_owner (owner\u003d0x7fbdcdc1ee00) at /usr/src/debug/nfs-ganesha-4.0.2/SAL/nfs4_state.c:718\n718                     get_gsh_export_ref(state-\u003estate_export);\n(gdb) p state\n$1 \u003d (state_t *) 0x7fbdcdc0df80\n \n(gdb) p state-\u003estate_obj\n$3 \u003d (struct fsal_obj_handle *) 0x0\n(gdb) \n\n```\n\nEven though state may not be released, what could prevent _state_del_locked to set state_obj and state_export to NULL?\n\n```\n\nPTHREAD_RWLOCK_wrlock(\u0026export-\u003elock);\n\tPTHREAD_MUTEX_lock(\u0026state-\u003estate_mutex);\n\tglist_del(\u0026state-\u003estate_export_list);\n\tstate-\u003estate_export \u003d NULL;\n\tPTHREAD_MUTEX_unlock(\u0026state-\u003estate_mutex);\n\tPTHREAD_RWLOCK_unlock(\u0026export-\u003elock);\n\tput_gsh_export(export);\n\n#ifdef DEBUG_SAL\n\tPTHREAD_MUTEX_lock(\u0026all_state_v4_mutex);\n\n\tglist_del(\u0026state-\u003estate_list_all);\n\n\tPTHREAD_MUTEX_unlock(\u0026all_state_v4_mutex);\n#endif\n\n\t/* Remove from the list of states for a particular file */\n\tPTHREAD_MUTEX_lock(\u0026state-\u003estate_mutex);\n\tglist_del(\u0026state-\u003estate_list);\n\t/* Put ref for this state entry */\n\tobj-\u003eobj_ops-\u003eput_ref(obj);\n\tstate-\u003estate_obj \u003d NULL;\n\tPTHREAD_MUTEX_unlock(\u0026state-\u003estate_mutex);\n\n```",
      "parentUuid": "f76f080d_ca069548",
      "revId": "5540dc35ef8f6deed0f7e50d37a6e23d6cb522e1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37f6a71b_f487e65f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2022-06-24T21:53:03Z",
      "side": 1,
      "message": "I think there are two patches addressing the same issue. The other patch is:\n\nhttps://review.gerrithub.io/c/ffilz/nfs-ganesha/+/540364",
      "revId": "5540dc35ef8f6deed0f7e50d37a6e23d6cb522e1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}