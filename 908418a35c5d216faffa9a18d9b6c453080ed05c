{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1bedb1c0_fd27f728",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1020351
      },
      "writtenOn": "2022-07-18T07:16:42Z",
      "side": 1,
      "message": "Cool",
      "revId": "908418a35c5d216faffa9a18d9b6c453080ed05c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cddaa1dc_ca0df790",
        "filename": "src/monitoring/monitoring.cc",
        "patchSetId": 10
      },
      "lineNbr": 278,
      "author": {
        "id": 1020351
      },
      "writtenOn": "2022-07-18T07:16:42Z",
      "side": 1,
      "message": "This goes over all clients - the loop\u0027s cost will only go up with time. If you use an LRU you can iterate just the active clients, and stop on the first inactive one.\nYou can also prune based on that",
      "revId": "908418a35c5d216faffa9a18d9b6c453080ed05c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a36fde5_429a6b9f",
        "filename": "src/monitoring/monitoring.cc",
        "patchSetId": 10
      },
      "lineNbr": 303,
      "author": {
        "id": 1020351
      },
      "writtenOn": "2022-07-18T07:16:42Z",
      "side": 1,
      "message": "The comment in monitoring_register_export_label() seems to imply we\u0027re never allowed to free the memory pointed to by exportLabels entries (\"... as the label is returned as a char* to C code\")",
      "revId": "908418a35c5d216faffa9a18d9b6c453080ed05c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e7d9389_918d2d0a",
        "filename": "src/monitoring/monitoring.cc",
        "patchSetId": 10
      },
      "lineNbr": 319,
      "author": {
        "id": 1020351
      },
      "writtenOn": "2022-07-18T07:16:42Z",
      "side": 1,
      "message": "Calling GetExportLabel() but the result is ignored if export_id\u003d\u003d0",
      "revId": "908418a35c5d216faffa9a18d9b6c453080ed05c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26a3d3dd_ebd3368b",
        "filename": "src/monitoring/monitoring.cc",
        "patchSetId": 10
      },
      "lineNbr": 422,
      "author": {
        "id": 1020351
      },
      "writtenOn": "2022-07-18T07:16:42Z",
      "side": 1,
      "message": "Ditto (ignored if export_id\u003d\u003d0)",
      "revId": "908418a35c5d216faffa9a18d9b6c453080ed05c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "198e5bc0_c6cdfe9b",
        "filename": "src/monitoring/monitoring.cc",
        "patchSetId": 10
      },
      "lineNbr": 476,
      "author": {
        "id": 1020351
      },
      "writtenOn": "2022-07-18T07:16:42Z",
      "side": 1,
      "message": "Ditto (can do like monitoring_mdcache_cache_miss() below and inline the variable)",
      "revId": "908418a35c5d216faffa9a18d9b6c453080ed05c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb9e2190_7b9af7ac",
        "filename": "src/monitoring/monitoring_internal.h",
        "patchSetId": 10
      },
      "lineNbr": 44,
      "author": {
        "id": 1005370
      },
      "writtenOn": "2022-07-18T04:05:12Z",
      "side": 1,
      "message": "ERROR: spaces required around that \u0027\u003c\u0027 (ctx:VxV)\n+extern std::unique_ptr\u003cprometheus::Exposer\u003e exposer;\n                       ^",
      "revId": "908418a35c5d216faffa9a18d9b6c453080ed05c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0283dfbf_3b8b4519",
        "filename": "src/monitoring/monitoring_internal.h",
        "patchSetId": 10
      },
      "lineNbr": 44,
      "author": {
        "id": 1005370
      },
      "writtenOn": "2022-07-18T04:05:12Z",
      "side": 1,
      "message": "ERROR: spaces required around that \u0027\u003e\u0027 (ctx:VxW)\n+extern std::unique_ptr\u003cprometheus::Exposer\u003e exposer;\n                                           ^",
      "revId": "908418a35c5d216faffa9a18d9b6c453080ed05c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f39ec852_e0d4bd03",
        "filename": "src/monitoring/monitoring_internal.h",
        "patchSetId": 10
      },
      "lineNbr": 45,
      "author": {
        "id": 1005370
      },
      "writtenOn": "2022-07-18T04:05:12Z",
      "side": 1,
      "message": "ERROR: spaces required around that \u0027\u003c\u0027 (ctx:VxV)\n+extern std::shared_ptr\u003cprometheus::Registry\u003e registry;\n                       ^",
      "revId": "908418a35c5d216faffa9a18d9b6c453080ed05c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad2261ad_41307111",
        "filename": "src/monitoring/monitoring_internal.h",
        "patchSetId": 10
      },
      "lineNbr": 45,
      "author": {
        "id": 1005370
      },
      "writtenOn": "2022-07-18T04:05:12Z",
      "side": 1,
      "message": "ERROR: spaces required around that \u0027\u003e\u0027 (ctx:VxW)\n+extern std::shared_ptr\u003cprometheus::Registry\u003e registry;\n                                            ^",
      "revId": "908418a35c5d216faffa9a18d9b6c453080ed05c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1569864b_248b2845",
        "filename": "src/monitoring/monitoring_internal.h",
        "patchSetId": 10
      },
      "lineNbr": 47,
      "author": {
        "id": 1005370
      },
      "writtenOn": "2022-07-18T04:05:12Z",
      "side": 1,
      "message": "ERROR: need consistent spacing around \u0027\u0026\u0027 (ctx:WxV)\n+const std::string \u0026GetExportLabel(export_id_t export_id);\n                   ^",
      "revId": "908418a35c5d216faffa9a18d9b6c453080ed05c",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}