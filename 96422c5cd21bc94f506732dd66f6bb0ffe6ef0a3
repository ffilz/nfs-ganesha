{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "866c06e1_22622cc5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1020068
      },
      "writtenOn": "2024-05-14T23:33:02Z",
      "side": 1,
      "message": "TL;DR: If someone wants to build with `-DUSE_NFS3\u003dOFF` (or `-DUSE_NFSACL3\u003dOFF`) and an FSAL that doesn\u0027t use POSIX ACLs (or, say with `-DUSE_FSAL_VFS\u003dON -DENABLE_VFS_POSIX_ACL\u003dOFF`) then `libacl` is technically not required but this change forces it to be available.\n\nIs this for `ENABLE_VFS_POSIX_ACL`?\n\nIf this is specified on the command-line then `libacl` is already mandatory:\n\n```\n$ cmake -DUSE_FSAL_VFS\u003dON -DENABLE_VFS_POSIX_ACL\u003dON ../nfs-ganesha/src\n[...]\n-- Looking for include file sys/acl.h\n-- Looking for include file sys/acl.h - not found\n-- Looking for include file acl/libacl.h\n-- Looking for include file acl/libacl.h - not found\nCMake Warning at CMakeLists.txt:686 (message):\n  Could not find libacl\n\n\nCMake Warning at CMakeLists.txt:690 (message):\n  Could not find sys/acl.h\n\n\nCMake Error at CMakeLists.txt:707 (message):\n  Missing VFS FSAL prerequisites, but requested on command line\n\n\n-- Configuring incomplete, errors occurred!\nSee also \"/home/martins/downloads/nfs-ganesha/build/CMakeFiles/CMakeOutput.log\".\nSee also \"/home/martins/downloads/nfs-ganesha/build/CMakeFiles/CMakeError.log\".\n\n```\nThis is handled by:\n```\n      else(ENABLE_VFS_POSIX_ACL)\n\tif(ENABLE_VFS_POSIX_ACL_REQUIRED)\n\t  message(FATAL_ERROR \"Missing VFS FSAL prerequisites, but requested on command line\")\n\telse(ENABLE_VFS_POSIX_ACL_REQUIRED)\n\t  message(WARNING \"Missing VFS FSAL prerequisites, disabling ENABLE_VFS_POSIX_ACL\")\n\tendif(ENABLE_VFS_POSIX_ACL_REQUIRED)\n      endif(ENABLE_VFS_POSIX_ACL)\n```\nThe error message is arguably weak.  It should probably say:\n```\nMissing VFS POSIX ACL prerequisities ...\n```\nor\n```\nMissing ENABLE_VFS_POSIX_ACL prerequisites ...\n```\nThe `_REQUIRED` thing seems to be a convention for ensuring that anything enabled on the `cmake` command-line causes a failure if it dependencies are missing.  If it isn\u0027t on the command-line but is enabled by default then the convention seems to be to disable it and warn.  However, this isn\u0027t done uniformly through `src/MakeLists.txt`.\n\nThe convention means that if someone really wants `ENABLE_VFS_POSIX_ACL` then they should always specify it on the `cmake` command-line to ensure failure if it can\u0027t be built.  However, I notice the default is still `OFF`, so it needs to be on the command-line regardless.\n\nIf a problem is being seen with another `libacl` user then this probably needs a `_REQUIRED` check too.  For example, I notice that `CEPHFS_POSIX_ACL`, `USE_NFSACL3`, `USE_FSAL_GLUSTER` all just warn and disable.\n\nIf someone\u0027s packaging file (e.g. RPM spec file) needs a particular feature then it should enable that feature on the `cmake` command-line rather than depending on defaults.  If a feature is enabled on the command-line but can\u0027t be built then `cmake` should fail - if this only generates a warning then that is a bug.\n\nHopefully, I\u0027m not being too hard-nosed, but the feature is there so we might as well use it.  Doing this consistently allows a minimal set of dependencies to be installed.",
      "revId": "96422c5cd21bc94f506732dd66f6bb0ffe6ef0a3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7478bb20_db9b6151",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2024-05-14T23:48:52Z",
      "side": 1,
      "message": "It looks like CEPH has a separate POSIX_ACL enable, but GLUSTER does not.\n\nI agree, we should not force libacl.",
      "parentUuid": "866c06e1_22622cc5",
      "revId": "96422c5cd21bc94f506732dd66f6bb0ffe6ef0a3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83ea31b6_99e6c88b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1004087
      },
      "writtenOn": "2024-05-15T13:37:11Z",
      "side": 1,
      "message": "This is unrelated to ENABLE_VFS_POSIX_ACL.  I got a new machine, and was getting my dev environment up.  Cmake passed, and the build failed because the headers from libacl were missing.  ENABLE_VFS_POSIX_ACL was off.",
      "parentUuid": "7478bb20_db9b6151",
      "revId": "96422c5cd21bc94f506732dd66f6bb0ffe6ef0a3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "375e8866_97758a1b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1020068
      },
      "writtenOn": "2024-05-15T22:58:11Z",
      "side": 1,
      "message": "\u003e This is unrelated to ENABLE_VFS_POSIX_ACL.  I got a new machine, and was getting my dev environment up.  Cmake passed, and the build failed because the headers from libacl were missing.  ENABLE_VFS_POSIX_ACL was off.\n\nWhere did the build fail?\n\nIf `cmake` passed but the build failed then that is a bug where something isn\u0027t checking for `libacl` before disabling a component or failing.\n\nI can\u0027t see that it would fail in the Gluster FSAL, because it should be disabled if `libacl` is not found.\n\nHowever, here is an example of what I was talking about in my previous comment:\n```\ndiff --git a/src/CMakeLists.txt b/src/CMakeLists.txt\nindex 84fe85a5c..e58162f37 100644\n--- a/src/CMakeLists.txt\n+++ b/src/CMakeLists.txt\n@@ -868,9 +868,13 @@ if(USE_FSAL_GLUSTER)\n \tset(USE_POSIX_ACLS ON)\n \tset(USE_ACL_MAPPING ON)\n     else(HAVE_LIBACL)\n+      if (USE_FSAL_GLUSTER_REQUIRED)\n+\tmessage(FATAL_ERROR \"Could not find libacl, but GLUSTER requested on command line.\")\n+      else (USE_FSAL_GLUSTER_REQUIRED)\n \tset(USE_POSIX_ACLS OFF)\n \tset(USE_FSAL_GLUSTER OFF)\n \tmessage(STATUS \"Could not find libacl, disabling GLUSTER fsal build\")\n+      endif(USE_FSAL_GLUSTER_REQUIRED)\n     endif(HAVE_LIBACL)\n     check_library_exists(gfapi glfs_xreaddirplus_r ${GFAPI_LIBDIR} HAVE_XREADDIRPLUS)\n     if(HAVE_XREADDIRPLUS)\n```\nThis way, if the Gluster FSAL requires `libacl`, which is not available, then the behaviour depends on whether the Gluster FSAL is being built by default or was specified on the `cmake` command-line.",
      "parentUuid": "83ea31b6_99e6c88b",
      "revId": "96422c5cd21bc94f506732dd66f6bb0ffe6ef0a3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0f07074_110c0407",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003571
      },
      "writtenOn": "2024-05-15T23:17:45Z",
      "side": 1,
      "message": "I think we need to rethink how we enable ACLs. Certainly it should be an option to enable these two bits:\n\nACL support in a FSAL in use\nSupport of the NFS v3 POSIX ACL sideband protocol\n\nAnd then, to the extent that more than one ACL model is available for the back end, what do we do. Martin and I started a conversation yesterday on IRC.\n\nCertainly if libacl is not available, anything that depends on it can not be enabled, and following our rules on cmake, if an option was explicit on the cmake command line that can not be supported because libacl is not present, then we must fail the cmake.",
      "parentUuid": "83ea31b6_99e6c88b",
      "revId": "96422c5cd21bc94f506732dd66f6bb0ffe6ef0a3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c736b5d0_d8d85537",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1020068
      },
      "writtenOn": "2024-05-15T23:58:19Z",
      "side": 1,
      "message": "I can try to have a go at that in the next few days (I have a long queue and some deadlines).\n\nI think this can clearly be removed from `USE_FSAL_GLUSTER` related magic:\n```\n$ git grep USE_POSIX_ACLS\nsrc/CMakeLists.txt:     set(USE_POSIX_ACLS ON)\nsrc/CMakeLists.txt:     set(USE_POSIX_ACLS OFF)\n```\nIt clearly isn\u0027t used.\n\nThen we\u0027re down to `USE_ACL_MAPPING` for the FSALs.  Or should this continue to be secondary to a new setting (e.g. `USE_FSAL_NFS4_POSIX_ACLS`), since `USE_ACL_MAPPING` is secondary to `USE_NFSACL3`?\n\nI think something new.  Not sure how easy it is to have `cmake` fail with errors like:\n`ENABLE_VFS_POSIX_ACL is no longer supported, use USE_FSAL_NFS4_POSIX_ACLS instead`\n\nDo we want deprecation warnings?",
      "parentUuid": "f0f07074_110c0407",
      "revId": "96422c5cd21bc94f506732dd66f6bb0ffe6ef0a3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}